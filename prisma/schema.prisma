// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  userId Int @default(autoincrement()) @id
  name String
  email String @unique
  password String
  address String
  cart Cart?
  orders Orders[]
}

model Products {
  productId Int @default(autoincrement()) @id
  name String
  description String
  price Float
  stock Boolean? @default(true)
  cartItem CartItem[]
  orderItem OrderItem[]
}

model Orders {
  orderId Int @default(autoincrement()) @id
  orderDate DateTime? @default(now()) 
  status Status? @default(created)
  orderItem OrderItem[]
  coupon Coupons? @relation(fields: [couponId], references: [id] , onDelete: Cascade)
  couponId Int?
  subTotal Float
  total Float
  discount Float?
  user Users @relation(fields: [userId] , references:[userId] , onDelete: Cascade)
  userId Int
}

model OrderItem {
  order Orders @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId Int 
  product Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId Int
  quantity Int 
  
  @@id([orderId,productId])
}

model Cart {
  cartId Int @default(autoincrement()) @id
  cartItem CartItem[]
  user Users @relation(fields:[userId], references: [userId], onDelete: Cascade)
  userId Int @unique
}

model CartItem {
  cart Cart @relation(fields: [cartId], references: [cartId], onDelete: Cascade)
  cartId Int
  product Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId Int
  quantity Int 

  @@id([cartId,productId])
}

model Coupons {
  id Int @default(autoincrement()) @id
  code String @unique
  discountPercentage Float 
  order Orders[]
}

enum Status {
  created
  preparing
  shipping
  delivered
}